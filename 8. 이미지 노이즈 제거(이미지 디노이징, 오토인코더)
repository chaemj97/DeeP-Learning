{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1UtAeZC9nF-oWbFUp7gjoq-MqB4o0fMHL","authorship_tag":"ABX9TyNqh1hDZofVvbUst3KWQeP6"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["## 가우스 노이즈 더하기\n","- 가우스 노이즈 : 노이즈의 형태가 정규분포의 형태를 따르는 것"],"metadata":{"id":"MtWnsmYAmbl5"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"5s82BxMonxaY","executionInfo":{"status":"ok","timestamp":1712435613151,"user_tz":-540,"elapsed":9032,"user":{"displayName":"채민지","userId":"08298446370124931959"}}},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import numpy as np\n","import torch\n","\n","from torchvision.datasets.mnist import MNIST\n","from torchvision.transforms import ToTensor\n","\n","# 이미지에 가우스 노이즈를 추가하는 함수\n","def gaussian_noise(x, scale=0.8):\n","    # 가우스 노이즈를 더해줌\n","    gaussian_data_x = x + np.random.normal(loc=0, scale=scale, size=x.shape) # 정규분포를 따르는 행렬을 반환 (loc : 정규분포의 평균, scale : 정규분포의 표준편차)\n","\n","    # 이미지의 픽셀값을 0과 1 사이로 정규화\n","    gaussian_data_x = np.clip(gaussian_data_x, 0, 1)\n","\n","    gaussian_data_x = torch.tensor(gaussian_data_x)\n","    gaussian_data_x = gaussian_data_x.type(torch.FloatTensor)\n","    return gaussian_data_x"]},{"cell_type":"code","source":["# 학습용 데이터\n","training_data = MNIST(root='./', train=True, download=True, transform=ToTensor())\n","# 평가용 데이터\n","test_data = MNIST(root='./', train=False, download=True, transform=ToTensor())\n","\n","# 첫번째 원본 이미지\n","img = training_data.data[0]\n","# 노이즈가 섞인 이미지로 변환\n","gaussian = gaussian_noise(img)\n","\n","# 이미지 출력\n","plt.subplot(1,2,1)\n","plt.title('original')\n","plt.imshow(img)\n","plt.subplot(1,2,2)\n","plt.title('noisy')\n","plt.imshow(gaussian)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":710},"id":"bTVuQ2X3nlEX","executionInfo":{"status":"ok","timestamp":1712435616414,"user_tz":-540,"elapsed":3286,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"3cacbcbd-9d4c-4dac-856e-0644f0bc7eca"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz to ./MNIST/raw/train-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 9912422/9912422 [00:00<00:00, 201930687.81it/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-images-idx3-ubyte.gz to ./MNIST/raw\n"]},{"output_type":"stream","name":"stderr","text":["\n"]},{"output_type":"stream","name":"stdout","text":["\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz to ./MNIST/raw/train-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 28881/28881 [00:00<00:00, 118993805.33it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/train-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz to ./MNIST/raw/t10k-images-idx3-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 1648877/1648877 [00:00<00:00, 71107983.80it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-images-idx3-ubyte.gz to ./MNIST/raw\n","\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz\n","Downloading http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz to ./MNIST/raw/t10k-labels-idx1-ubyte.gz\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 4542/4542 [00:00<00:00, 19242958.35it/s]"]},{"output_type":"stream","name":"stdout","text":["Extracting ./MNIST/raw/t10k-labels-idx1-ubyte.gz to ./MNIST/raw\n","\n"]},{"output_type":"stream","name":"stderr","text":["\n","<ipython-input-1-b2bfff32f24d>:16: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  gaussian_data_x = torch.tensor(gaussian_data_x)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## 학습용 데이터 만들기"],"metadata":{"id":"l9oxUFTkoOuv"}},{"cell_type":"code","source":["from torch.utils.data.dataset import Dataset\n","\n","class Denoising(Dataset):\n","    def __init__(self):\n","        # 원본 이미지\n","        self.mnist = MNIST(root='./', train=True, download=True, transform=ToTensor())\n","        # 노이즈가 낀 데이터를 담는 리스트\n","        self.data = []\n","\n","        # 노이즈 입히기\n","        for i in range(len(self.mnist)):\n","            noisy_input = gaussian_noise(self.mnist.data[i])\n","            input_tensor = torch.tensor(noisy_input)\n","            self.data.append(torch.unsqueeze(input_tensor, dim=0))\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    # 데이터 불러오기\n","    def __getitem__(self, i):\n","        data = self.data[i]\n","        # 원본 이미지도 0과 1 사이로 값을 맞추기\n","        label = self.mnist.data[i]/255\n","\n","        return data, label"],"metadata":{"id":"CiG2JmLKnlCA","executionInfo":{"status":"ok","timestamp":1712435616414,"user_tz":-540,"elapsed":7,"user":{"displayName":"채민지","userId":"08298446370124931959"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["## 인코더 모델"],"metadata":{"id":"7LyDPnWmpM5P"}},{"cell_type":"code","source":["# 기본 블록\n","\n","import torch.nn as nn\n","\n","class BasicBlock(nn.Module):\n","    def __init__(self, in_channels, out_channels, hidden_dim):\n","        super(BasicBlock, self).__init__()\n","\n","        self.conv1 = nn.Conv2d(in_channels, hidden_dim, kernel_size=3, padding=1)\n","        self.conv2 = nn.Conv2d(hidden_dim, out_channels, kernel_size=3, padding=1)\n","        self.relu = nn.ReLU()\n","\n","    def forward(self, x):\n","        x = self.conv1(x)\n","        x = self.relu(x)\n","        x = self.conv2(x)\n","        x = self.relu(x)\n","\n","        return x"],"metadata":{"id":"dn6QhOrpnk-y","executionInfo":{"status":"ok","timestamp":1712435616415,"user_tz":-540,"elapsed":7,"user":{"displayName":"채민지","userId":"08298446370124931959"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["# 인코더 모델\n","\n","class Encoder(nn.Module):\n","    def __init__(self):\n","        super(Encoder, self).__init__()\n","\n","        # 입력 채널이 1인 것에 주의\n","        self.conv1 = BasicBlock(in_channels=1, out_channels=16, hidden_dim=16)\n","        self.conv2 = BasicBlock(in_channels=16, out_channels=8, hidden_dim=8)\n","\n","        self.pool = nn.AvgPool2d(kernel_size=2, stride=2)\n","\n","    def forward(self,x):\n","        x = self.conv1(x)\n","        x = self.pool(x)\n","        x = self.conv2(x)\n","        x = self.pool(x)\n","\n","        return x"],"metadata":{"id":"c_5Q7jR8nk9N","executionInfo":{"status":"ok","timestamp":1712435616415,"user_tz":-540,"elapsed":7,"user":{"displayName":"채민지","userId":"08298446370124931959"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["## 디코더 모델"],"metadata":{"id":"nVr1khRjqi6j"}},{"cell_type":"code","source":["# 디코더 모델\n","\n","class Decoder(nn.Module):\n","    def __init__(self):\n","        super(Decoder, self).__init__()\n","        self.conv1 = BasicBlock(in_channels=8, out_channels=8, hidden_dim=8)\n","        self.conv2 = BasicBlock(in_channels=8, out_channels=16, hidden_dim=16)\n","\n","        # 출력층은 기본 블록이 아닌 합성곱층\n","        self.conv3 = nn.Conv2d(in_channels=16, out_channels=1, kernel_size=3, padding=1)\n","\n","        # 업샘플링층\n","        self.upsample1 = nn.ConvTranspose2d(8, 8, kernel_size=2, stride=2)\n","        self.upsample2 = nn.ConvTranspose2d(16, 16, kernel_size=2, stride=2)\n","\n","    def forward(self,x):\n","        x = self.conv1(x)\n","        x = self.upsample1(x)\n","        x = self.conv2(x)\n","        x = self.upsample2(x)\n","        x = self.conv3(x)\n","\n","        return x\n","\n"],"metadata":{"id":"_yVIOVY3nk7Q","executionInfo":{"status":"ok","timestamp":1712435658367,"user_tz":-540,"elapsed":816,"user":{"displayName":"채민지","userId":"08298446370124931959"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["## CAE 모델"],"metadata":{"id":"_ODdrpRLFIWG"}},{"cell_type":"code","source":["class CAE(nn.Module):\n","    def __init__(self):\n","        super(CAE, self).__init__()\n","        self.enc = Encoder()\n","        self.dec = Decoder()\n","\n","    def forward(self, x):\n","        x = self.enc(x)\n","        x = self.dec(x)\n","        # 채널차원 삭제\n","        x = torch.squeeze(x)\n","        return x"],"metadata":{"id":"0JDAzB9znk1y","executionInfo":{"status":"ok","timestamp":1712435616415,"user_tz":-540,"elapsed":6,"user":{"displayName":"채민지","userId":"08298446370124931959"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["## 모델 학습"],"metadata":{"id":"Wzz-7O1mFeey"}},{"cell_type":"code","source":["import tqdm\n","\n","from torch.utils.data.dataloader import DataLoader\n","from torch.optim.adam import Adam\n","\n","device = 'cuda' if torch.cuda.is_available() else 'cup'\n","\n","# 학습에 이용할 데이터셋\n","trainset = Denoising()\n","train_loader = DataLoader(trainset, batch_size=32)\n","\n","model = CAE().to(device)\n","\n","lr = 0.001\n","optim = Adam(params=model.parameters(), lr=lr)\n","\n","for epoch in range(20):\n","    iterator = tqdm.tqdm(train_loader)\n","\n","    for data, label in iterator:\n","        optim.zero_grad()\n","        pred = model(data.to(device))\n","        loss = nn.MSELoss()(torch.squeeze(pred), label.to(device))\n","        loss.backward()\n","        optim.step()\n","        iterator.set_description(f'epoch : {epoch} loss : {loss}')\n","\n","torch.save(model.state_dict(), './CAE.pth')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uovEgnmWFg-r","executionInfo":{"status":"ok","timestamp":1712435980560,"user_tz":-540,"elapsed":321215,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"3b057cd7-46cf-44b9-e273-0aabc7f9fc0b"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-1-b2bfff32f24d>:16: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  gaussian_data_x = torch.tensor(gaussian_data_x)\n","<ipython-input-3-61e48c90b67a>:13: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  input_tensor = torch.tensor(noisy_input)\n","epoch : 0 loss : 0.012684401124715805: 100%|██████████| 1875/1875 [00:22<00:00, 84.23it/s]\n","epoch : 1 loss : 0.011480459943413734: 100%|██████████| 1875/1875 [00:20<00:00, 90.99it/s] \n","epoch : 2 loss : 0.010742795653641224: 100%|██████████| 1875/1875 [00:19<00:00, 95.71it/s] \n","epoch : 3 loss : 0.010202048346400261: 100%|██████████| 1875/1875 [00:14<00:00, 128.31it/s]\n","epoch : 4 loss : 0.009744781069457531: 100%|██████████| 1875/1875 [00:14<00:00, 129.34it/s]\n","epoch : 5 loss : 0.009306785650551319: 100%|██████████| 1875/1875 [00:14<00:00, 132.14it/s]\n","epoch : 6 loss : 0.00917862169444561: 100%|██████████| 1875/1875 [00:14<00:00, 132.07it/s]\n","epoch : 7 loss : 0.008957800455391407: 100%|██████████| 1875/1875 [00:14<00:00, 132.67it/s]\n","epoch : 8 loss : 0.009391626343131065: 100%|██████████| 1875/1875 [00:14<00:00, 132.69it/s]\n","epoch : 9 loss : 0.008973740972578526: 100%|██████████| 1875/1875 [00:14<00:00, 132.32it/s]\n","epoch : 10 loss : 0.00892639346420765: 100%|██████████| 1875/1875 [00:14<00:00, 131.16it/s]\n","epoch : 11 loss : 0.00843503512442112: 100%|██████████| 1875/1875 [00:14<00:00, 128.38it/s]\n","epoch : 12 loss : 0.00842770840972662: 100%|██████████| 1875/1875 [00:14<00:00, 128.08it/s]\n","epoch : 13 loss : 0.008225609548389912: 100%|██████████| 1875/1875 [00:14<00:00, 133.22it/s]\n","epoch : 14 loss : 0.007923091761767864: 100%|██████████| 1875/1875 [00:14<00:00, 127.01it/s]\n","epoch : 15 loss : 0.007897279225289822: 100%|██████████| 1875/1875 [00:14<00:00, 132.82it/s]\n","epoch : 16 loss : 0.007863316684961319: 100%|██████████| 1875/1875 [00:14<00:00, 132.87it/s]\n","epoch : 17 loss : 0.00795285589993: 100%|██████████| 1875/1875 [00:14<00:00, 132.85it/s]\n","epoch : 18 loss : 0.007998857647180557: 100%|██████████| 1875/1875 [00:14<00:00, 132.82it/s]\n","epoch : 19 loss : 0.007831663824617863: 100%|██████████| 1875/1875 [00:14<00:00, 132.25it/s]\n"]}]},{"cell_type":"markdown","source":["## 모델 성능 평가"],"metadata":{"id":"HlSKuRGhGpnA"}},{"cell_type":"code","source":["# 모델의 출력값을 cpu로 이동\n","model.cpu()\n","\n","with torch.no_grad():\n","    # 학습이 완료된 가중치 불러오기\n","    model.load_state_dict(torch.load('./CAE.pth', map_location=device))\n","\n","    # 시각화에 사용할 이미지 한 장 불러오기\n","    img = test_data.data[0]\n","    # 이미지애 가우스 노이즈 입히기\n","    gaussian = gaussian_noise(img)\n","\n","    # 모델의 입력 모양에 맞춰 채널 차원 추가\n","    input = torch.unsqueeze(gaussian, dim=0)\n","    input.type(torch.FloatTensor)\n","    input.to(device)\n","    input = torch.unsqueeze(input, dim=0)\n","\n","    # 그래프 그리기\n","    plt.subplot(1,3,1)\n","    plt.imshow(torch.squeeze(gaussian))\n","    plt.subplot(1,3,2)\n","    plt.imshow(torch.squeeze(model(input)))\n","    plt.subplot(1,3,3)\n","    plt.imshow(torch.squeeze(img))\n","    plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":264},"id":"z-4zYIqmFg9F","executionInfo":{"status":"ok","timestamp":1712436713522,"user_tz":-540,"elapsed":1089,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"6db827a1-0aae-4e7f-ec4a-f667107fcaf4"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-1-b2bfff32f24d>:16: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n","  gaussian_data_x = torch.tensor(gaussian_data_x)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"31LHiA7LFg6G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"FLIJEBq5Fg4W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"o_CmB-MIFg2D"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"toGLOdK2Fgzv"},"execution_count":null,"outputs":[]}]}