{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNipekGjVm5tK6jppxjPFYM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["## ResNet 기본 블록"],"metadata":{"id":"qrJ9estDJzIG"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"RyS8tjIVFRGg","executionInfo":{"status":"ok","timestamp":1712227728701,"user_tz":-540,"elapsed":4334,"user":{"displayName":"채민지","userId":"08298446370124931959"}}},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","\n","class BasicBlock(nn.Module):\n","    def __init__(self, in_channels, out_channels, kernel_size=3):\n","        super(BasicBlock, self).__init__()\n","\n","        # 합성곱층 정의\n","        self.c1 = nn.Conv2d(in_channels, out_channels, kernel_size=kernel_size, padding=1)\n","        self.c2 = nn.Conv2d(out_channels, out_channels, kernel_size=kernel_size, padding=1)\n","\n","        # 스킵 커넥션 -> 입력값과 합성곱의 결과를 더해주기 위해 입력값에 1*1 합성곱으로 채널 수를 맞춰주기\n","        self.downsample = nn.Conv2d(in_channels, out_channels, kernel_size=1)\n","\n","        # 배치 정규화층 정의\n","        self.bn1 = nn.BatchNorm2d(num_features=out_channels)\n","        self.bn2 = nn.BatchNorm2d(num_features=out_channels)\n","\n","        self.relu = nn.ReLU()\n","\n","    def forward(self, x):\n","        # 스킵 커넥션을 위해 초기 입력 저장\n","        x_ = x\n","\n","        # ResNet 기본 블록에서 F(x) 부분\n","        x = self.c1(x)\n","        x = self.bn1(x)\n","        x = self.relu(x)\n","        x = self.c2(x)\n","        x = self.bn2(x)\n","\n","        # 합성곱의 결과와 입력의 채널 수를 맞춤\n","        x_ = self.downsample(x_)\n","\n","        # 합성곱층의 결과와 저장해놨던 입력값을 더해줌(스킵 커넥션)\n","        x += x_\n","        x = self.relu(x)\n","\n","        return x\n"]},{"cell_type":"markdown","source":["## ResNet 모델 정의"],"metadata":{"id":"Rv9whKooL80_"}},{"cell_type":"code","source":["class ResNet(nn.Module):\n","    def __init__(self, num_classes=10):\n","        super(ResNet, self).__init__()\n","\n","        # 기본 블록\n","        self.b1 = BasicBlock(in_channels=3, out_channels=64)\n","        self.b2 = BasicBlock(in_channels=64, out_channels=128)\n","        self.b3 = BasicBlock(in_channels=128, out_channels=256)\n","\n","        # 풀링을 최댓값이 아닌 평균값으로\n","        self.pool = nn.AvgPool2d(kernel_size=2, stride=2)\n","\n","        # 분류기\n","        self.fc1 = nn.Linear(in_features=4096, out_features=2048) # 4*4의 256채널 이미지를 일려로 풀기 때문에\n","        self.fc2 = nn.Linear(in_features=2048 , out_features=512)\n","        self.fc3 = nn.Linear(in_features=512, out_features=num_classes)\n","\n","        self.relu = nn.ReLU()\n","\n","    def forward(self, x):\n","        # 기본 블록과 풀링층 통과\n","        x = self.b1(x)\n","        x = self.pool(x)\n","        x = self.b2(x)\n","        x = self.pool(x)\n","        x = self.b3(x)\n","        x = self.pool(x)\n","\n","        # 분류기의 입력으로 사용하기 위한 평탄화\n","        x = torch.flatten(x, start_dim=1)\n","\n","        # 분류기로 예측값 출력\n","        x = self.fc1(x)\n","        x = self.relu(x)\n","        x = self.fc2(x)\n","        x = self.relu(x)\n","        x = self.fc3(x)\n","\n","        return x\n","\n"],"metadata":{"id":"ZEXZQ9aQL_qN","executionInfo":{"status":"ok","timestamp":1712227895725,"user_tz":-540,"elapsed":527,"user":{"displayName":"채민지","userId":"08298446370124931959"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["## 모델 학습\n"],"metadata":{"id":"dK8cEZF7sq5S"}},{"cell_type":"code","source":["import tqdm\n","\n","from torchvision.datasets.cifar import CIFAR10\n","from torchvision.transforms import Compose, ToTensor\n","from torchvision.transforms import RandomHorizontalFlip, RandomCrop, Normalize\n","from torch.utils.data.dataloader import DataLoader\n","\n","from torch.optim.adam import Adam\n","\n","transforms = Compose([\n","    RandomCrop((32,32), padding=4),\n","    RandomHorizontalFlip(p=0.5),\n","    ToTensor(),\n","    Normalize(mean=(0.4914, 0.4822, 0.4465), std=(0.247, 0.243, 0.261))\n","])\n","\n","# 데이터셋 정의\n","training_data = CIFAR10(root='./', train=True, download=True, transform=transforms)\n","test_data = CIFAR10(root='./', train=False, download=True, transform=transforms)\n","\n","# 데이터로더 정의\n","train_loader = DataLoader(training_data, batch_size=32, shuffle=True)\n","test_loader = DataLoader(test_data, batch_size=32, shuffle=False)\n","\n","# 모델 정하기\n","device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","\n","model = ResNet(num_classes=10)\n","model.to(device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oHjNNPtMswDK","executionInfo":{"status":"ok","timestamp":1712227899111,"user_tz":-540,"elapsed":820,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"634967c2-95c7-4b5b-c00e-4fceb6c6b2ec"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Files already downloaded and verified\n","Files already downloaded and verified\n"]},{"output_type":"execute_result","data":{"text/plain":["ResNet(\n","  (b1): BasicBlock(\n","    (c1): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (c2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (downsample): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))\n","    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu): ReLU()\n","  )\n","  (b2): BasicBlock(\n","    (c1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (c2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (downsample): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))\n","    (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu): ReLU()\n","  )\n","  (b3): BasicBlock(\n","    (c1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (c2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (downsample): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))\n","    (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","    (relu): ReLU()\n","  )\n","  (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)\n","  (fc1): Linear(in_features=4096, out_features=2048, bias=True)\n","  (fc2): Linear(in_features=2048, out_features=512, bias=True)\n","  (fc3): Linear(in_features=512, out_features=10, bias=True)\n","  (relu): ReLU()\n",")"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":[" torch.cuda.is_available()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cNuVRfD6uAYR","executionInfo":{"status":"ok","timestamp":1712227903200,"user_tz":-540,"elapsed":573,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"4bdc6ab9-1535-4492-a13f-d8c8e4967649"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# 학습 루프 정의\n","lr = 1e-4\n","optim = Adam(model.parameters(), lr=lr)\n","\n","for epoch in range(30):\n","    iterator = tqdm.tqdm(train_loader)\n","    for data, label in iterator:\n","        optim.zero_grad()\n","        preds = model(data.to(device))\n","        loss = nn.CrossEntropyLoss()(preds, label.to(device))\n","        loss.backward()\n","        optim.step()\n","\n","        iterator.set_description(f'eopch : {epoch+1} loss : {loss.item()}')\n","\n","torch.save(model.state_dict(), 'ResNet.pth')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SMBOq-1AuAV7","executionInfo":{"status":"ok","timestamp":1712229344356,"user_tz":-540,"elapsed":1440199,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"dacb271d-97fa-410d-896f-a5980d496ea1"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["eopch : 1 loss : 1.1921247243881226: 100%|██████████| 1563/1563 [00:56<00:00, 27.49it/s]\n","eopch : 2 loss : 0.7775918245315552: 100%|██████████| 1563/1563 [00:58<00:00, 26.60it/s]\n","eopch : 3 loss : 0.349982887506485: 100%|██████████| 1563/1563 [00:53<00:00, 29.36it/s]\n","eopch : 4 loss : 0.5340454578399658: 100%|██████████| 1563/1563 [00:49<00:00, 31.46it/s]\n","eopch : 5 loss : 0.5153878331184387: 100%|██████████| 1563/1563 [00:50<00:00, 31.03it/s]\n","eopch : 6 loss : 0.22548577189445496: 100%|██████████| 1563/1563 [00:49<00:00, 31.51it/s]\n","eopch : 7 loss : 0.7016119956970215: 100%|██████████| 1563/1563 [00:49<00:00, 31.60it/s]\n","eopch : 8 loss : 0.380683958530426: 100%|██████████| 1563/1563 [00:49<00:00, 31.68it/s]\n","eopch : 9 loss : 0.5502530336380005: 100%|██████████| 1563/1563 [00:46<00:00, 33.39it/s]\n","eopch : 10 loss : 0.8589972257614136: 100%|██████████| 1563/1563 [00:46<00:00, 33.57it/s]\n","eopch : 11 loss : 0.11193262040615082: 100%|██████████| 1563/1563 [00:46<00:00, 33.76it/s]\n","eopch : 12 loss : 0.04634895920753479: 100%|██████████| 1563/1563 [00:46<00:00, 33.27it/s]\n","eopch : 13 loss : 0.21184422075748444: 100%|██████████| 1563/1563 [00:46<00:00, 33.31it/s]\n","eopch : 14 loss : 0.37629881501197815: 100%|██████████| 1563/1563 [00:46<00:00, 33.64it/s]\n","eopch : 15 loss : 0.3963218331336975: 100%|██████████| 1563/1563 [00:46<00:00, 33.69it/s]\n","eopch : 16 loss : 0.23816294968128204: 100%|██████████| 1563/1563 [00:46<00:00, 33.72it/s]\n","eopch : 17 loss : 0.27775079011917114: 100%|██████████| 1563/1563 [00:46<00:00, 33.47it/s]\n","eopch : 18 loss : 0.46321406960487366: 100%|██████████| 1563/1563 [00:46<00:00, 33.54it/s]\n","eopch : 19 loss : 0.0070297750644385815: 100%|██████████| 1563/1563 [00:47<00:00, 33.12it/s]\n","eopch : 20 loss : 0.08355257660150528: 100%|██████████| 1563/1563 [00:46<00:00, 33.91it/s]\n","eopch : 21 loss : 0.013080354779958725: 100%|██████████| 1563/1563 [00:46<00:00, 33.84it/s]\n","eopch : 22 loss : 0.07406461983919144: 100%|██████████| 1563/1563 [00:46<00:00, 33.63it/s]\n","eopch : 23 loss : 0.6244639754295349: 100%|██████████| 1563/1563 [00:46<00:00, 33.55it/s]\n","eopch : 24 loss : 0.1252223402261734: 100%|██████████| 1563/1563 [00:46<00:00, 33.91it/s]\n","eopch : 25 loss : 0.3434860408306122: 100%|██████████| 1563/1563 [00:46<00:00, 33.83it/s]\n","eopch : 26 loss : 0.0825934037566185: 100%|██████████| 1563/1563 [00:46<00:00, 33.87it/s]\n","eopch : 27 loss : 0.008646045811474323: 100%|██████████| 1563/1563 [00:46<00:00, 33.69it/s]\n","eopch : 28 loss : 0.02550990879535675: 100%|██████████| 1563/1563 [00:46<00:00, 33.67it/s]\n","eopch : 29 loss : 0.07866405695676804: 100%|██████████| 1563/1563 [00:46<00:00, 33.78it/s]\n","eopch : 30 loss : 0.027241747826337814: 100%|██████████| 1563/1563 [00:46<00:00, 33.86it/s]\n"]}]},{"cell_type":"markdown","source":["## 모델 성능 평가"],"metadata":{"id":"bXnWn6thvMYg"}},{"cell_type":"code","source":["model.load_state_dict(torch.load('ResNet.pth', map_location=device))\n","\n","num_corr=0\n","\n","with torch.no_grad():\n","    for data, label in test_loader:\n","        output = model(data.to(device))\n","        preds = output.data.max(1)[1]\n","        corr = preds.eq(label.to(device).data).sum().item()\n","        num_corr += corr\n","\n","    print(f'Accuracy : {num_corr/len(test_data)}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7Ucdoi3JvNt_","executionInfo":{"status":"ok","timestamp":1712229349359,"user_tz":-540,"elapsed":5007,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"2dde3627-c151-4486-f4d2-04499949b05c"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy : 0.8862\n"]}]}]}