{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO4fAoQgG4rtNMB1d05GGp/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install scikit-learn==1.0.2"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":374},"id":"_653CCu5dgpK","executionInfo":{"status":"ok","timestamp":1712156200017,"user_tz":-540,"elapsed":14658,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"41c0bf8d-7afb-4cc2-d0d9-9ab62950b23d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting scikit-learn==1.0.2\n","  Downloading scikit_learn-1.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (26.5 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m26.5/26.5 MB\u001b[0m \u001b[31m40.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy>=1.14.6 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.0.2) (1.25.2)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.0.2) (1.11.4)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.0.2) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn==1.0.2) (3.4.0)\n","Installing collected packages: scikit-learn\n","  Attempting uninstall: scikit-learn\n","    Found existing installation: scikit-learn 1.2.2\n","    Uninstalling scikit-learn-1.2.2:\n","      Successfully uninstalled scikit-learn-1.2.2\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","bigframes 1.0.0 requires scikit-learn>=1.2.2, but you have scikit-learn 1.0.2 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed scikit-learn-1.0.2\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["sklearn"]},"id":"38a6378599d8415d8127a755438e7832"}},"metadata":{}}]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tnZNqb8-cXTY","executionInfo":{"status":"ok","timestamp":1712156227817,"user_tz":-540,"elapsed":486,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"57a5823a-812f-4503-ae90-adb399b071d4"},"outputs":[{"output_type":"stream","name":"stdout","text":["dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename', 'data_module'])\n"]}],"source":["from sklearn.datasets import load_boston\n","\n","# 경고 무시\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","# 데이터셋을 불러오기\n","dataset = load_boston()\n","print(dataset.keys())"]},{"cell_type":"markdown","source":["- data : 우리가 사용할 특징값\n","- target : 예측할 값\n","- feature_names : 각 특징의 이름\n","- DESCR : 데이터셋에 대한 전반적인 정보를 제공\n","- filename : 데이터셋의 csv 파일이 존재하는 위치"],"metadata":{"id":"cX0HUuGWd63T"}},{"cell_type":"code","source":["import pandas as pd\n","\n","dataFrame = pd.DataFrame(dataset['data'])\n","dataFrame.columns = dataset['feature_names']\n","dataFrame['target'] = dataset['target']\n","\n","print(dataFrame.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VmaLBCrVdEfI","executionInfo":{"status":"ok","timestamp":1712156441423,"user_tz":-540,"elapsed":1481,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"9ffe886f-a462-47f2-f4f7-9da40e37129e"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n","0  0.00632  18.0   2.31   0.0  0.538  6.575  65.2  4.0900  1.0  296.0   \n","1  0.02731   0.0   7.07   0.0  0.469  6.421  78.9  4.9671  2.0  242.0   \n","2  0.02729   0.0   7.07   0.0  0.469  7.185  61.1  4.9671  2.0  242.0   \n","3  0.03237   0.0   2.18   0.0  0.458  6.998  45.8  6.0622  3.0  222.0   \n","4  0.06905   0.0   2.18   0.0  0.458  7.147  54.2  6.0622  3.0  222.0   \n","\n","   PTRATIO       B  LSTAT  target  \n","0     15.3  396.90   4.98    24.0  \n","1     17.8  396.90   9.14    21.6  \n","2     17.8  392.83   4.03    34.7  \n","3     18.7  394.63   2.94    33.4  \n","4     18.7  396.90   5.33    36.2  \n"]}]},{"cell_type":"code","source":["dataFrame.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qpk20Vhtfwyi","executionInfo":{"status":"ok","timestamp":1712156781492,"user_tz":-540,"elapsed":5,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"7256bd99-d75c-4d6b-d323-7aa5d8bee370"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(506, 14)"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["## 선형회귀 MLP 모델 설계"],"metadata":{"id":"T-sgT201fVvH"}},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","\n","from torch.optim.adam import Adam\n","\n","# 1. 모델 정의\n","model = nn.Sequential( # 입력된 층들이 순서대로 계산\n","    # 선형 회귀\n","    nn.Linear(13,100), # 13개의 특징을 받아 100개 특징을 반환\n","    nn.ReLU(),\n","    nn.Linear(100,1)\n",")\n","\n","# 2. 정답을 제외한 특징을 X에 입력\n","X = dataFrame.iloc[:,:13].values\n","Y = dataFrame['target'].values\n","\n","batch_size = 100\n","learning_rate = 0.001\n","\n","# 3. 가중치를 수정하는 최적화 함수 정의\n","optim = Adam(model.parameters(), lr = learning_rate) # 가장 많이 쓰이는 최적화 기법\n","\n","# 에포크 반복\n","for epoch in range(200):\n","    # 배치 반복\n","    for i in range(len(X)//batch_size):\n","        # 4. 배치 크기에 맞게 인덱스 지정\n","        start = i*batch_size\n","        end = start + batch_size\n","\n","        # 파이토치 실수형 텐서로 변환\n","        x = torch.FloatTensor(X[start:end])\n","        y = torch.FloatTensor(Y[start:end])\n","\n","        # 5. 가중치의 기울기를 0으로 초기화\n","        optim.zero_grad()\n","\n","        # 6. 모델의 예측값 계산\n","        preds = model(x)\n","\n","        # 7. MSE 손실 계산\n","        loss = nn.MSELoss()(preds,y)\n","\n","        # 8. 오차 역전파\n","        loss.backward()\n","\n","        # 9. 최적화 진행\n","        optim.step()\n","\n","    if epoch%20 == 0:\n","        print(f'epoch {epoch} loss : {loss.item()}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CEMaZucDdEir","executionInfo":{"status":"ok","timestamp":1712157321756,"user_tz":-540,"elapsed":2061,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"7e37d50d-4bf4-444f-89d7-8c2e96915759"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["epoch 0 loss : 280.572509765625\n","epoch 20 loss : 42.37468338012695\n","epoch 40 loss : 40.38129806518555\n","epoch 60 loss : 40.01633834838867\n","epoch 80 loss : 39.92163848876953\n","epoch 100 loss : 39.92558288574219\n","epoch 120 loss : 39.907466888427734\n","epoch 140 loss : 39.79668045043945\n","epoch 160 loss : 39.71778106689453\n","epoch 180 loss : 39.587486267089844\n"]}]},{"cell_type":"markdown","source":["### 모델 성능 평가"],"metadata":{"id":"iXqbZa64inuF"}},{"cell_type":"code","source":["prediction = model(torch.FloatTensor(X[0,:13]))\n","real = Y[0]\n","print(f'prediction : {prediction.item()} real : {real}')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UPplLLCMdEpx","executionInfo":{"status":"ok","timestamp":1712157583005,"user_tz":-540,"elapsed":5,"user":{"displayName":"채민지","userId":"08298446370124931959"}},"outputId":"7dade944-e186-4327-9653-31dba3029f36"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["prediction : 26.718608856201172 real : 24.0\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"cA_WpNvtdEr1"},"execution_count":null,"outputs":[]}]}